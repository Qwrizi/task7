//задание 1
#include <iostream>
#include <vector>
#include <set>
std::vector<int> removeDuplicates(const std::vector<int>& vec) {
    std::set<int> uniqueElements;
    for (int num : vec) {
        uniqueElements.insert(num);
    }
    return std::vector<int>(uniqueElements.begin(), uniqueElements.end());
}

int main() {
    std::vector<int> vec;
    int n, element;
    std::cout << "Введите количество элементов: ";
    std::cin >> n;
    std::cout << "Введите элементы массива: ";
    for (int i = 0; i < n; ++i) {
        std::cin >> element;
        vec.push_back(element);
    }
    std::vector<int> uniqueVec = removeDuplicates(vec);
    std::cout << "Уникальные значения: ";
    for (int num : uniqueVec) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}
//Задание 2
#include <iostream>
#include <vector>
std::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {
    std::vector<int> merged;
    int i = 0, j = 0;
    while (i < arr1.size() && j < arr2.size()) {
        if (arr1[i] < arr2[j]) {
            merged.push_back(arr1[i]);
            i++;
        } else {
            merged.push_back(arr2[j]);
            j++;
        }
    }
    while (i < arr1.size()) {
        merged.push_back(arr1[i]);
        i++;
    }
    while (j < arr2.size()) {
        merged.push_back(arr2[j]);
        j++;
    }
    return merged;
}
int main() {
    std::vector<int> arr1 = {1, 3, 5, 7};
    std::vector<int> arr2 = {2, 4, 6, 8};
    std::vector<int> mergedArray = mergeSortedArrays(arr1, arr2);
    std::cout << "Объединенный отсортированный массив: ";
    for (int num : mergedArray) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}
//Задание 3
#include <iostream>
#include <vector>
#include <limits>
std::pair<int, std::pair<int, int>> maxSubarraySum(const std::vector<int>& arr) {
    int maxSum = std::numeric_limits<int>::min(); 
    int currentSum = 0;
    int start = 0; 
    int end = 0;  
    int tempStart = 0;
    for (int i = 0; i < arr.size(); i++) {
        currentSum += arr[i];
        if (currentSum > maxSum) {
            maxSum = currentSum;
            start = tempStart;
            end = i;
        }
        if (currentSum < 0) {
            currentSum = 0;
            tempStart = i + 1;
        }
    }
    return {maxSum, {start, end}};
}
int main() {
    std::vector<int> arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    auto result = maxSubarraySum(arr);
    int maxSum = result.first;
    int start = result.second.first;
    int end = result.second.second;
    std::cout << maxSum << std::endl;
    std::cout << end << std::endl;
    return 0;
}
//Задание 4
#include <iostream>
#include <vector>
#include <algorithm>
bool isEven(int num) {
    return num % 2 == 0;
}
int main() {
    std::vector<int> arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    std::partition(arr.begin(), arr.end(), isEven);
    std::cout << " ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}


